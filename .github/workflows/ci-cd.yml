name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  IMAGE_NAME: babbly-frontend
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY_FRONTEND }}

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: frontend-tests
    if: (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

  docker-build-and-push:
    name: Docker Build and Push to Docker Hub
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests]
    if: |
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      (needs.code-quality.result == 'success' || needs.code-quality.result == 'skipped') &&
      (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    steps:
      - uses: actions/checkout@v4

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
